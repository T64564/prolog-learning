%
%% A simplified version of ELIZA in Prolog
%%
% The main loop reads the input and calls process/1
% It stops when the input is the word bye.
tokenize([], []).

tokenize([CharCode | RestCodes], Tokens) :- % blank
  char_type(CharCode, space),
  !,
  tokenize(RestCodes, Tokens).

tokenize([CharCode | CharCodes], [Word | Tokens]) :-
  char_type(CharCode, alnum),
  !,
  make_word([CharCode | CharCodes], alnum, WordCodes, RestCoses) :-
  name(Word, WordCodes),
  tokenize(RestCodes, Tokens).

tokenize([CharCode | CharCodes], [Char | Tokens]) :-
  !,
  name(Char, [CharCode]),
  tokenize(CharCodes, Tokens).

make_word([CharCode1, CharCode2 | CharCodes], alnum,
  [CharCode1 | WordCodes], RestCodes) :-
  char_type(CharCode2, alnum),
  !,
  make_word([CharCode2 | CharCodes], alnum, WordCodes,
  RestCodes).

make_word([CharCode | RestCodes], alnum, [CharCode],
  RestCodes).

eliza :-
  write('Hello, I am ELIZA. How can I help you?'), nl,
  repeat, 
  write('> '),
  tokenize(In, []),
  process(In).

process[bye | _]) :-
  write('ELIZA: bye'), nl, !.

process(In) :-
  utterance(Out, In, []),
  !,
  write('ELIZA: '), write_answer(Out),
  fail.
utterance(U, L1, L) :-
  beginning(B, L1, L2),
  c(L2, the_word, L3),
  end(E, L3, L).
beginning(X, Y, Z) :- append(X, Z, Y).
end(X, Y, Z) :- append(X, Z, Y).

% process/1 accepts the user’s utterance. It either
% terminates or tries to find a template matching the
% user’s utterance
process([bye | _]) :-
  write(’ELIZA: bye’), nl, !.
process(In) :-
  utterance(Out, In, []),
  !,
  write(’ELIZA: ’), write_answer(Out),
  fail.

% utterance is a set of DCG rules describing
templates
utterance([’Why’, aren, ’’’’, t, you | Y]) -->
[’I’, am, not], end(Y).
utterance([’How’, long, have, you, been | Y]) -->
[’I’, am], end(Y).
utterance([’Why’, do, you, like | Y]) -->
[’I’, like], end(Y).
utterance([’Do’, you, often, think, of | Y]) -->
beginning(_), [’I’, remember], end(Y).
utterance([’Please’, tell, me, more, about, your,
X, .]) -->
beginning(_), [X], end(_), {important(X)}.
utterance([’Why’, are, so, negative, ’?’]) -->
[no].
utterance([’Tell’, me, more, .]) -->
[_].
utterance([’Please’, go, on, .]) -->
beginning(_).
% The Prolog clauses beginning/3 and end/3
% link the pieces of the utterance
beginning(X, Y, Z) :- append(X, Z, Y).
end(X, Y, Z) :- append(X, Z, Y).
% The Freudian facts
important(father).
important(mother).
important(brother).
important(sister).
% write_answer/1 prints the content of the list
% containing Eliza’s answer.
write_answer([Head | Tail]) :-
  write(Head), write(’ ’),
  write_answer(Tail).
write_answer([]) :- nl.
